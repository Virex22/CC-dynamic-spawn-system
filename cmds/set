local enums = dofile("/utils/enums")
local helper = dofile("/utils/global_helper")
local store = dofile("/utils/store")

local function validateValue(value)
    isPercentage = string.find(value, "%d+%%") ~= nil
    isNumber = tonumber(value) ~= nil
    if not isPercentage and not isNumber then
        print("Invalid value:", value)
        return false
    end
    return true
end


function deepCopy(obj)
    if type(obj) ~= "table" then
        return obj
    end
    local res = {}
    for k, v in pairs(obj) do
        res[deepCopy(k)] = deepCopy(v)
    end
    return res
end

local function updateGenerateOption(value, mob, zone)
    local focusKey = store.getFocusKey()
    if focusKey == nil then
        focusKey = "nofocus"
    end

    -- set focus if not exist
    if not helper.isInArray(store.generateOption, focusKey, true) then
        if focusKey == "nofocus" then
            store.generateOption[focusKey] = {}
        else
            store.generateOption[focusKey] = {
                focusInfo = deepCopy(store.focusOption)
            }
        end
    end

    -- set zone if not exist
    if not helper.isInArray(store.generateOption[focusKey], zone, true) then
        store.generateOption[focusKey][zone] = {}
    end

    -- set or update mob and value
    local found = false
    for k, v in pairs(store.generateOption[focusKey][zone]) do
        if v.mob == mob then
            v.value = value
            found = true
            break
        end
    end

    if not found then
        table.insert(store.generateOption[focusKey][zone], {
            mob = mob,
            value = value
        })
    end

    store.save()
end

local function processSetCommand(args)
    if #args < 3 then
        print("Usage: set [Zone] [PercentageValue / Count] ([TypeOfMob], default: terrorist)")
        return
    end

    local zone = args[2]
    local value = args[3]
    local mob = args[4]

    if not helper.isInArray(enums.Zones, zone, true) then
        print("Invalid Zone:", zone)
        return
    end

    if not validateValue(value) then
        return
    end

    if mob ~= nil and not helper.isInArray(enums.Mechants, mob, true) then
        print("Invalid MobType:", mob)
        return
    elseif mob == nil then
        mob = "Terroriste"
    end

    updateGenerateOption(value, mob, zone)
end

local env = _ENV

processSetCommand(env.args)
